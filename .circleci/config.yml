version: 2
references:
  basic-job: &basic-job
    working_directory: ~/alpine-pkg-glibc
  upload-job: &upload-job
    <<: *basic-job
    docker:
      - image: golang:alpine
  upload-attach-workspace: &upload-attach-workspace
    attach_workspace:
      at: .
  upload-packages: &upload-packages
    run:
      command: apk add --no-cache git openssh-client
      name: Install dependencies of go get
  upload-ghr: &upload-ghr
    run:
      command: go get github.com/tcnksm/ghr
      name: Install ghr executable
jobs:
  build:
    <<: *basic-job
    docker:
      - image: docker:git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Download public signing key
          command: |
            wget https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            echo "823b54589c93b02497f1ba4dc622eaef9c813e6b0f0ebbb2f771e32adf9f4ef2  sgerrand.rsa.pub" | sha256sum -c -
      - run:
          name: Create Docker volumes
          command: |
            docker create --name input --volume /home/builder/package alpine:3.11 /bin/true
            docker cp . input:/home/builder/package/
            docker create --name output --volume /packages alpine:3.11 /bin/true
            docker cp sgerrand.rsa.pub output:/packages/
      - run:
          name: Build packages
          command: |
            docker run \
              --env RSA_PRIVATE_KEY="$(cat /home/builder/package/sgerrand.rsa)" \
              --env RSA_PRIVATE_KEY_NAME="sgerrand.rsa" \
              --env PACKAGER_PRIVKEY="home/builder/package/sgerrand.rsa.pub" \
              --volumes-from input \
              --volumes-from output \
              sgerrand/alpine-abuild:3.11
      - run:
          name: Test package installation
          command: |
            docker run \
              --volumes-from output \
              alpine:3.11 sh -c "cp /packages/sgerrand.rsa.pub /etc/apk/keys/ && apk -U add --no-progress --upgrade /packages/builder/x86_64/*.apk"
      - run:
          name: Extract packages
          command: |
            mkdir -p packages
            docker cp output:/packages/builder packages/
      - run:
          name: Remove Docker volumes
          command: |
            docker rm input
            docker rm output
          when: always
      - persist_to_workspace:
          root: .
          paths: packages
      - store_artifacts:
          destination: pkgs
          path: packages
  doctests:
    <<: *basic-job
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install required packages
          command: apk add --no-cache git openssh-client
      - checkout
      - run:
          name: Parse and run installation steps
          command: |
            while read line
            do  
              echo "$line" | sed -e '/^[#:]/D' -e '/^$/D' -e '/^apk/p' -e '/^wget/p' -e '/^[A-z]/D' | sh -ex 
            done < README.md
  upload-master:
    <<: *upload-job
    steps:
      - *upload-attach-workspace
      - *upload-packages
      - *upload-ghr
      - deploy:
          name: Upload to GitHub release
          command: |
            ghr -r $CIRCLE_PROJECT_REPONAME -u $CIRCLE_PROJECT_USERNAME --prerelease --delete unreleased packages
            ghr -r $CIRCLE_PROJECT_REPONAME -u $CIRCLE_PROJECT_USERNAME --prerelease unreleased packages/builder/x86_64
  upload-tag:
    <<: *upload-job
    steps:
      - *upload-attach-workspace
      - *upload-packages
      - *upload-ghr
      - deploy:
          name: Upload to GitHub release
          command: |
            ghr -r $CIRCLE_PROJECT_REPONAME -u $CIRCLE_PROJECT_USERNAME $CIRCLE_TAG packages
            ghr -r $CIRCLE_PROJECT_REPONAME -u $CIRCLE_PROJECT_USERNAME $CIRCLE_TAG packages/builder/x86_64
workflows:
  version: 2
  test-then-upload-artefacts:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - doctests
      - upload-master:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
          requires:
            - build
      - upload-tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[0-9]+(\.[0-9]+){1,2}(\-r\d+)?$/
          requires:
            - build
